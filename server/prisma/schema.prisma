generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id       String @id @default(auto()) @map("_id") @db.ObjectId
  username String @unique
  email    String @unique
  password String
  role     Role   @default(USER)
  avatar   String?
  
  properties Property[]
  favorites  Property[] @relation("UserFavorites", fields: [favoriteIds], references: [id])
  favoriteIds String[] @db.ObjectId
  
  appointments Appointment[]
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Property {
  id          String @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  description String
  price       Float
  location    String
  city        String
  bedrooms    Int
  bathrooms   Int
  garages     Int
  area        Int
  type        PropertyType
  images      String[]
  
  ownerId String @db.ObjectId
  owner   User   @relation(fields: [ownerId], references: [id])
  
  favoredBy   User[]   @relation("UserFavorites", fields: [favoredByIds], references: [id])
  favoredByIds String[] @db.ObjectId
  
  appointments Appointment[]
  
  featured    Boolean @default(false)
  verified    Boolean @default(false)
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Appointment {
  id        String @id @default(auto()) @map("_id") @db.ObjectId
  
  userId    String @db.ObjectId
  user      User   @relation(fields: [userId], references: [id])
  
  propertyId String   @db.ObjectId
  property   Property @relation(fields: [propertyId], references: [id])
  
  date        DateTime
  time        String
  message     String?
  status      AppointmentStatus @default(PENDING)
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum Role {
  USER
  AGENT
  ADMIN
}

enum PropertyType {
  HOUSE
  APARTMENT
  VILLA
  OFFICE
  HOTEL
}

enum AppointmentStatus {
  PENDING
  CONFIRMED
  CANCELLED
  COMPLETED
}
